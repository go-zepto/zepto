{"version":3,"sources":["dataProvider/index.ts","App.tsx","reportWebVitals.ts","core/utils/field.ts","core/generators/fields/compGens/ReferenceList/index.tsx","core/generators/fields/index.ts","core/generators/fields/compGens/Text/index.tsx","core/generators/fields/compGens/Number/index.tsx","core/generators/fields/compGens/Datetime/index.tsx","core/generators/fields/compGens/Reference/index.tsx","core/generators/resources/resGens/Create/index.tsx","core/generators/resources/resGens/Edit/index.tsx","core/generators/resources/index.tsx","core/generators/resources/resGens/List/index.tsx","index.tsx"],"names":["VALID_WHERE_FILTER_REGEX","parseWhereFromFilter","filter","where","Object","keys","forEach","f","match","exec","length","boolOperator","fieldName","filterType","item","push","LinkerDataProvider","baseURL","httpClient","fetchUtils","fetchJson","getList","resource","params","pagination","page","perPage","linkerFilter","skip","limit","query","JSON","stringify","url","then","headers","json","data","total","count","getOne","id","getMany","ids","getManyReference","Promise","resolve","update","method","body","updateMany","create","delete","deleteMany","App","props","Admin","dataProvider","resComponents","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","COMMON_TITLE_FIELD_NAMES","guessMainTitleField","res","list_fields","listFieldNames","map","name","cfn","includes","ReferenceListDatagrid","recordID","redirect","useRedirect","useState","rows","setRows","dp","useDataProvider","useEffect","refResourceFieldName","endpoint","sort","field","order","columns","headerName","options","flex","style","height","width","marginBottom","pageSize","rowHeight","disableColumnMenu","disableSelectionOnClick","disableColumnSelector","componentsProps","toolbar","onRowClick","r","row","components","Toolbar","record","padding","borderBottom","overflow","float","Typography","variant","fontSize","Button","size","color","component","Link","to","pathname","state","DEFAULT_FIELD_GENERATORS","fieldCompGen","s","TextField","inputCompGen","TextInput","NumberField","NumberInput","DateField","DateTimeInput","resources","find","console","error","optTextFieldName","textFieldName","ReferenceField","reference","source","optionText","option_text_field","autocomplete","ReferenceInput","filterToQuery","q","sf","searchable_fields","guessedTitle","enabled","AutocompleteInput","SelectInput","Comp","ref_resource_field_name","ReferenceListDatagridGenerator","generateInputCompFromField","type","CreateGenerator","comps","create_inputs","optProps","Create","SimpleForm","EditGenerator","update_inputs","idx","Edit","Generator","list","generateFieldCompFromField","List","Datagrid","rowClick","edit","rootEl","document","getElementById","schemaPath","getAttribute","schema","toLowerCase","generateResourceComp","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.28a46e92.chunk.js","sourcesContent":["import { fetchUtils, DataProvider } from 'ra-core';\nimport { stringify } from 'query-string';\n\nconst VALID_WHERE_FILTER_REGEX = /(or_)?([_a-zA-Z0-9]+)_(eq|gt|gte|lt|lte|between|in|nin|like|nlike)/\n\n// Linker Filter\ntype LinkerFilter = {\n  skip?: number;\n  limit?: number;\n  where?: any;\n  include?: {\n    relation: string;\n    where: any;\n  }[]\n};\n\n// React-Admin filter\ntype RAFilter = {\n  [key: string]: string;\n};\n\nconst parseWhereFromFilter = (filter: RAFilter): any => {\n  const where = {} as any;\n  Object.keys(filter).forEach(f => {\n    const match = VALID_WHERE_FILTER_REGEX.exec(f);\n    if (match?.length === 4) {\n      const boolOperator = match[1] === \"or_\" ? \"or\" : \"and\";\n      const fieldName = match[2] as string;\n      const filterType = match[3] as string;\n      const item: any = {};\n      item[fieldName] = {};\n      item[fieldName][filterType] = filter[f];\n      if (!where[boolOperator]) {\n        where[boolOperator] = [];\n      }\n      where[boolOperator].push(item);\n    }\n  });\n  return where;\n};\n\nexport const LinkerDataProvider = (\n  baseURL: string,\n  httpClient = fetchUtils.fetchJson,\n): DataProvider => ({\n  getList: (resource, params) => {\n    const where = parseWhereFromFilter(params.filter);\n    const { page, perPage } = params.pagination;\n    const linkerFilter: LinkerFilter = {\n      skip: (page-1) * perPage,\n      limit: perPage,\n      where,\n    };\n    const query = {\n      filter: JSON.stringify(linkerFilter),\n    }\n    const url = `${baseURL}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({ headers, json }) => ({\n      data: json.data,\n      total: json.count,\n    }));\n  },\n  getOne: (resource, params) => {\n    const url = `${baseURL}/${resource}/${params.id}`;\n    return httpClient(url).then(({ headers, json }) => ({\n      data: json,\n    }));\n  },\n  getMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({ id: params.ids }),\n  };\n  const url = `${baseURL}/${resource}?${stringify(query)}`;\n  return httpClient(url).then(({ json }) => ({ data: json.data }));\n  },\n  getManyReference: (resource, params) => {\n    return Promise.resolve({} as any);\n  },\n  update: (resource, params) => {\n    return httpClient(`${baseURL}/${resource}/${params.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json }))\n  },\n  updateMany: (resource, params) => {\n    return Promise.resolve({} as any);\n  },\n  create: (resource, params) => {\n    return httpClient(`${baseURL}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json }))\n  },\n  delete: (resource, params) => {\n    return Promise.resolve({} as any);\n  },\n  deleteMany: (resource, params) => {\n    return Promise.resolve({} as any);\n  },\n});\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { Admin } from 'react-admin';\nimport { LinkerDataProvider } from './dataProvider';\n\n\n\nexport const App = (props: any) => {\n  return (\n    <Admin dataProvider={LinkerDataProvider('http://localhost:8000/api')}>\n      {props.resComponents}\n    </Admin>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Resource } from \"../../types/schema\";\n\nconst COMMON_TITLE_FIELD_NAMES = [\n  'title',\n  'name',\n  'first_name',\n  'full_name',\n];\n\nexport const guessMainTitleField = (res: Resource): (string|null) => {\n  if (res.list_fields.length === 0) {\n    return null\n  }\n  const listFieldNames = res.list_fields.map(f => f.name);\n  for (const cfn of COMMON_TITLE_FIELD_NAMES) {\n    if (listFieldNames.includes(cfn)) {\n      return cfn;\n    }\n  }\n  return null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { ComponentGenerator } from '../../../../../types/generators';\nimport { Field, Resource, Schema } from '../../../../../types/schema';\n// import { guessMainTitleField } from '../../../../utils/field';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { useDataProvider, useRedirect } from 'ra-core';\nimport { Link } from 'react-router-dom';\n\n\ninterface DatagridColumn {\n  field: string;\n  headerName: string;\n  flex: number;\n  width?: number;\n}\n\ninterface ReferenceListDatagridProps {\n  resource: Resource;\n  refResourceFieldName: string;\n  recordID: string;\n}\n\nconst ReferenceListDatagrid = (props: ReferenceListDatagridProps) => {\n  const recordID = props.recordID;\n  const redirect = useRedirect();\n  const [rows, setRows] = useState<any[]>([]);\n  const dp = useDataProvider();\n  useEffect(() => {\n    const filter: any = {};\n    filter[`${props.refResourceFieldName}_eq`] = recordID;\n    dp.getList(props.resource.endpoint, {\n      filter,\n      pagination: {\n        page: 1,\n        perPage: 10,\n      },\n      sort: {\n        field: 'id',\n        order: \"ASC\",\n      }\n    }).then(res => {\n      setRows(res?.data || []);\n    })\n  }, [dp, props.refResourceFieldName, props.resource.endpoint, recordID, setRows]);\n  const columns: DatagridColumn[] = props.resource.list_fields.map(f => ({\n    field: f.name,\n    headerName: f.options[\"label\"],\n    flex: f.name === \"id\" ? 0.3 : 1,\n  })); \n  return(\n    <div style={{ height: 400, width: '100%', marginBottom: '32px' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={5}\n        rowHeight={48}\n        disableColumnMenu\n        disableSelectionOnClick\n        disableColumnSelector\n        componentsProps={{\n          toolbar: {\n            resource: props.resource,\n            refResourceFieldName: props.refResourceFieldName,\n            recordID: recordID,\n          },\n        }}\n        onRowClick={(r) => {\n          redirect( `/${props.resource.endpoint}/${r.row.id}`);\n        }}\n        components={{\n          Toolbar: (props: any) => {\n            const record: any = {};\n            record[props.refResourceFieldName] = props.recordID;\n            return (\n              <div style={{ padding: '20px', borderBottom: '1px solid #e9e9e9', overflow: 'auto' }}> \n                <div style={{ float: 'left' }}>\n                  <Typography variant=\"h3\" style={{ fontSize: '20px' }}>\n                    {props.resource.name}\n                  </Typography>\n                </div>\n                <div style={{ float: 'right' }}>             \n                  <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    component={Link}\n                    to={{\n                        pathname: `/${props.resource.endpoint}/create`,\n                        state: { record: record },\n                    }}\n                  >\n                    Create\n                  </Button>\n                </div>       \n              </div>\n            );\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nconst ReferenceListDatagridGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => {\n  const resource = s.resources.find(r => r.name === f.options[\"ref_resource\"]);\n  if (!resource) {\n    console.error(`[ReferenceInput] Resource not found \"${resource}\"`);\n    return null;\n  }\n  const { ref_resource_field_name } = f.options;\n  return (\n    <ReferenceListDatagrid resource={resource} refResourceFieldName={ref_resource_field_name} recordID={props.recordID} />\n  );\n}\n\n\nexport const ReferenceListFieldGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => {\n  const resource = s.resources.find(r => r.name === f.options[\"ref_resource\"]);\n  if (!resource) {\n    console.error(`[ReferenceInput] Resource not found \"${resource}\"`);\n    return null;\n  }\n  // const optTextFieldName = f.options[\"text_field_name\"];\n  // const textFieldName = optTextFieldName && optTextFieldName !== \"\" ? optTextFieldName : guessMainTitleField(resource);\n  return (\n    <div>\n      TODO: ReferenceListField\n    </div>\n  );\n}\n\nexport const ReferenceListInputGenerator: ComponentGenerator = (s: Schema, f: Field) => {\n  const Comp = ReferenceListDatagridGenerator(s, f);\n  return (props: any) => {\n    return (\n      <Comp {...props} recordID={props.record.id} />\n    );\n  };\n};\n","import React from \"react\";\nimport { ComponentGenerator, FieldProps } from \"../../../types/generators\";\nimport { Field, Schema } from \"../../../types/schema\";\nimport { DatetimeFieldGenerator, DatetimeInputGenerator } from \"./compGens/Datetime\";\nimport { NumberFieldGenerator, NumberInputGenerator } from \"./compGens/Number\";\nimport { ReferenceFieldGenerator, ReferenceInputGenerator } from \"./compGens/Reference\";\nimport { ReferenceListFieldGenerator, ReferenceListInputGenerator } from \"./compGens/ReferenceList\";\nimport { TextFieldGenerator, TextInputGenerator } from \"./compGens/Text\";\n\ninterface FieldGenerator {\n  fieldCompGen: ComponentGenerator\n  inputCompGen: ComponentGenerator\n};\n\n\ntype FieldGenerators = {\n  [key: string]: FieldGenerator;\n};\n\nexport const DEFAULT_FIELD_GENERATORS: FieldGenerators = {\n  \"text\": {\n    fieldCompGen: TextFieldGenerator,\n    inputCompGen: TextInputGenerator,\n  },\n  \"number\": {\n    fieldCompGen: NumberFieldGenerator,\n    inputCompGen: NumberInputGenerator,\n  },\n  \"datetime\": {\n    fieldCompGen: DatetimeFieldGenerator,\n    inputCompGen: DatetimeInputGenerator,\n  },\n  \"reference\": {\n    fieldCompGen: ReferenceFieldGenerator,\n    inputCompGen: ReferenceInputGenerator,\n  },\n  \"reference_list\": {\n    fieldCompGen: ReferenceListFieldGenerator,\n    inputCompGen: ReferenceListInputGenerator,\n  }\n};\n\nexport const generateFieldCompFromField = (s: Schema, f: Field): React.FC<FieldProps> => DEFAULT_FIELD_GENERATORS[f.type].fieldCompGen(s, f);\nexport const generateInputCompFromField = (s: Schema, f: Field): React.FC<FieldProps> => DEFAULT_FIELD_GENERATORS[f.type].inputCompGen(s, f);\n","import { TextInput, TextField } from 'react-admin';\nimport { ComponentGenerator } from '../../../../../types/generators';\nimport { Field, Schema } from '../../../../../types/schema';\n\n\nexport const TextFieldGenerator: ComponentGenerator = (s: Schema, f: Field) => {\n  return (props: any) => {\n    return <TextField {...props} />;\n  };\n}\n\nexport const TextInputGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => (\n  <TextInput {...props} />\n);\n","import React from 'react';\nimport { NumberField, NumberInput } from 'react-admin';\nimport { ComponentGenerator } from '../../../../../types/generators';\nimport { Field, Schema } from '../../../../../types/schema';\n\n\nexport const NumberFieldGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => {\n  return <NumberField {...props} />;\n}\n\nexport const NumberInputGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => (\n  <NumberInput {...props} />\n);\n","import { DateField, DateTimeInput } from 'react-admin';\nimport { ComponentGenerator } from '../../../../../types/generators';\nimport { Field, Schema } from '../../../../../types/schema';\n\n\nexport const DatetimeFieldGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => {\n  return <DateField {...props} />;\n}\n\nexport const DatetimeInputGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => (\n  <DateTimeInput {...props} />\n);\n","import React from 'react';\nimport { TextField, ReferenceInput, SelectInput, AutocompleteInput, ReferenceField } from 'react-admin';\nimport { ComponentGenerator } from '../../../../../types/generators';\nimport { Field, Schema } from '../../../../../types/schema';\nimport { guessMainTitleField } from '../../../../utils/field';\n\n\nexport const ReferenceFieldGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => {\n  const resource = s.resources.find(r => r.name === f.options[\"ref_resource\"]);\n  if (!resource) {\n    console.error(`[ReferenceInput] Resource not found \"${resource}\"`);\n    return null;\n  }\n  const optTextFieldName = f.options[\"text_field_name\"];\n  const textFieldName = optTextFieldName && optTextFieldName !== \"\" ? optTextFieldName : guessMainTitleField(resource);\n  return (\n  <ReferenceField {...props}  reference={resource?.endpoint}>\n    <TextField source={textFieldName} />\n  </ReferenceField>  \n  );\n}\n\nexport const ReferenceInputGenerator: ComponentGenerator = (s: Schema, f: Field) => (props: any) => {\n  const resource = s.resources.find(r => r.name === f.options[\"ref_resource\"]);\n  if (!resource) {\n    console.error(`[ReferenceInput] Resource not found \"${resource}\"`);\n    return null;\n  }\n  const optionText = f.options.option_text_field;\n  const { autocomplete } = f.options;\n  const filterToQuery = (q: string) => {\n    if (q === \"\") {\n      return {};\n    }\n    const filter: any = {};\n    const sf = autocomplete.searchable_fields;\n    const guessedTitle = guessMainTitleField(resource);\n    const searchableFields = sf.length > 0 ? sf.length : (\n      guessedTitle != null ? [guessedTitle] : []\n    );\n    searchableFields.forEach((f: string) => {\n      filter[`or_${f}_like`] = `%${q}%`;\n    })\n    return filter;\n  };\n  return (\n    <ReferenceInput {...props} reference={resource?.endpoint} filterToQuery={filterToQuery}>\n      {\n        (autocomplete && autocomplete.enabled) ? (\n          <AutocompleteInput optionText={optionText} />\n          ) : (\n          <SelectInput optionText={optionText} />\n        )\n      }\n    </ReferenceInput>\n  )\n}\n","import React from \"react\";\nimport { Create, SimpleForm } from \"react-admin\";\nimport { ResourceGenerator } from \"../../../../../types/generators\";\nimport { Field, Resource, Schema } from \"../../../../../types/schema\";\nimport { generateInputCompFromField } from \"../../../fields\";\n\n\nconst CreateGenerator: ResourceGenerator =  (s: Schema, r: Resource) => {\n  const fields = r.create_inputs;\n  const comps = fields.map((f: Field) => {\n    const Comp = generateInputCompFromField(s, f);\n    const optProps = (f.options && f.options.props) || {};\n    return (\n      <Comp key={f.name} source={f.name} {...optProps} />\n    );\n  })\n  return (props: any) => (\n    <Create {...props}>\n        <SimpleForm>\n            {comps.map((Comp: any) => Comp)}\n        </SimpleForm>\n    </Create>\n  );\n};\n\nexport default CreateGenerator;\n","import React from \"react\";\nimport { Edit, SimpleForm } from \"react-admin\";\nimport { ResourceGenerator } from \"../../../../../types/generators\";\nimport { Field, Resource, Schema } from \"../../../../../types/schema\";\nimport { generateInputCompFromField } from \"../../../fields\";\n\n\nconst EditGenerator: ResourceGenerator =  (s: Schema, r: Resource) => {\n  const fields = r.update_inputs.length > 0 ? r.update_inputs : r.create_inputs;\n  const comps = fields.map((f: Field, idx: number) => {\n    const Comp = generateInputCompFromField(s, f);\n    const optProps = (f.options && f.options.props) || {};\n    return (\n      <Comp key={idx} source={f.name} {...optProps} />\n    );\n  })\n  return (props: any) => (\n    <Edit {...props}>\n      <SimpleForm>\n          {comps.map((Comp: any) => Comp)}\n      </SimpleForm>\n    </Edit>\n  );\n};\n\nexport default EditGenerator;\n","import React from \"react\";\nimport { Resource as RAResource } from \"react-admin\";\nimport { ResourceGenerator } from \"../../../types/generators\";\nimport { Resource, Schema } from \"../../../types/schema\";\nimport CreateGenerator from \"./resGens/Create\";\nimport EditGenerator from \"./resGens/Edit\";\nimport ListGenerator from \"./resGens/List\";\n\ntype GenerateResourceCompType = (schema: Schema, res: Resource) => any;\n\ninterface ResourceGenerators {\n  list: ResourceGenerator\n  create: ResourceGenerator\n  edit: ResourceGenerator\n};\n\nconst Generator: ResourceGenerators = {\n  list: ListGenerator,\n  create: CreateGenerator,\n  edit: EditGenerator\n};\n\nexport const generateResourceComp: GenerateResourceCompType = (schema: Schema, res: Resource) => {\n  const list = Generator.list(schema, res);\n  const create = Generator.create(schema, res);\n  const edit = Generator.edit(schema, res);\n  return (\n    <RAResource\n      key={res.name}\n      name={res.endpoint.toLowerCase()}\n      list={list}\n      create={create}\n      edit={edit}\n    />\n  );\n}\n","import React from \"react\";\nimport { Datagrid, List } from \"react-admin\";\nimport { ResourceGenerator } from \"../../../../../types/generators\";\nimport { Field, Resource, Schema } from \"../../../../../types/schema\";\nimport { generateFieldCompFromField } from \"../../../fields\";\n\n\nconst ListGenerator: ResourceGenerator =  (s: Schema, r: Resource) => {\n  const fields = r.list_fields;\n  const comps = fields.map((f: Field) => {\n    const Comp = generateFieldCompFromField(s, f);\n    const optProps = (f.options && f.options.props) || {};\n    return (\n      <Comp key={f.name} source={f.name} {...optProps} />\n    );\n  })\n  return (props: any) => (\n    <List {...props}>\n      <Datagrid rowClick=\"edit\">\n        {comps.map((Comp: any) => Comp)}\n      </Datagrid>\n    </List>\n  );\n};\n\nexport default ListGenerator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { fetchUtils } from 'ra-core';\nimport { Resource, Schema } from './types/schema';\nimport { generateResourceComp } from './core/generators/resources';\n\n\n\n\nconst rootEl = document.getElementById('root');\nconst schemaPath = rootEl?.getAttribute(\"schema\");\nfetchUtils.fetchJson(schemaPath).then(res => {\n  const schema: Schema = res.json;\n  const resComponents = schema.resources.map((r: Resource) =>  generateResourceComp(schema, r));\n  ReactDOM.render(\n    <React.StrictMode>\n      <App resComponents={resComponents} />\n    </React.StrictMode>,\n    rootEl,\n  );\n})\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}