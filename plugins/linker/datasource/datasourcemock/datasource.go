// Code generated by MockGen. DO NOT EDIT.
// Source: datasource.go

// Package datasourcemock is a generated GoMock package.
package datasourcemock

import (
	reflect "reflect"

	datasource "github.com/go-zepto/zepto/plugins/linker/datasource"
	gomock "github.com/golang/mock/gomock"
)

// MockDatasource is a mock of Datasource interface.
type MockDatasource struct {
	ctrl     *gomock.Controller
	recorder *MockDatasourceMockRecorder
}

// MockDatasourceMockRecorder is the mock recorder for MockDatasource.
type MockDatasourceMockRecorder struct {
	mock *MockDatasource
}

// NewMockDatasource creates a new mock instance.
func NewMockDatasource(ctrl *gomock.Controller) *MockDatasource {
	mock := &MockDatasource{ctrl: ctrl}
	mock.recorder = &MockDatasourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatasource) EXPECT() *MockDatasourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDatasource) Create(ctx datasource.QueryContext, data interface{}) (*map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDatasourceMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatasource)(nil).Create), ctx, data)
}

// Destroy mocks base method.
func (m *MockDatasource) Destroy(ctx datasource.QueryContext) (datasource.ManyAffectedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx)
	ret0, _ := ret[0].(datasource.ManyAffectedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDatasourceMockRecorder) Destroy(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDatasource)(nil).Destroy), ctx)
}

// Fields mocks base method.
func (m *MockDatasource) Fields() map[string]datasource.Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fields")
	ret0, _ := ret[0].(map[string]datasource.Field)
	return ret0
}

// Fields indicates an expected call of Fields.
func (mr *MockDatasourceMockRecorder) Fields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockDatasource)(nil).Fields))
}

// Find mocks base method.
func (m *MockDatasource) Find(ctx datasource.QueryContext) (*datasource.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].(*datasource.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDatasourceMockRecorder) Find(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDatasource)(nil).Find), ctx)
}

// FindOne mocks base method.
func (m *MockDatasource) FindOne(ctx datasource.QueryContext) (*map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx)
	ret0, _ := ret[0].(*map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockDatasourceMockRecorder) FindOne(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDatasource)(nil).FindOne), ctx)
}

// Update mocks base method.
func (m *MockDatasource) Update(ctx datasource.QueryContext, data interface{}) (datasource.ManyAffectedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(datasource.ManyAffectedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDatasourceMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatasource)(nil).Update), ctx, data)
}
